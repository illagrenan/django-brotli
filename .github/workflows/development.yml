name: "Development"

on:
  push:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  test:
    name: Run tests

    strategy:
      matrix:
        python-versions: [ "3.10", "3.11", "3.12", "3.13" ]
        django-versions: [ "4.2.*", "5.0.*", "5.1.*"]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        exclude:
          - python-versions: "3.13"
            django-versions: "4.2.*"
          - python-versions: "3.13"
            django-versions: "5.0.*"
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-versions }}

      - name: Install Poetry
        run: |
          python -m pip install --no-input --upgrade pip
          pip install --no-input poetry

      - name: Check pyproject.toml
        run: |
          poetry check -vv -n

      - name: Install dependencies
        run: |
          poetry install -vv -n

      - uses: actions/cache@v4
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ matrix.python-versions }}-${{ hashFiles('poetry.lock') }}

      - name: Install Django
        run: |
          poetry run pip install --upgrade django==${{ matrix.django-versions }}

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run linters
        run: |
          poetry run task lint

      - name: Run unittests
        run: |
          poetry run task coverage

      - name: Build wheels and source tarball
        run: |
          poetry build -vv -n

      - name: Check project build
        run: |
          poetry run task build_check

      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
